#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{anysize}
\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
\myTOC
\clearpage
\pagenumbering{arabic}
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language german-ch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subject{Bachelorthesis Frühlingssemester 2012}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Entwicklung eines graphischen Editors zur Modellierung von Systemen mit
 dynamischer Modellstruktur
\end_layout

\begin_layout Author
\begin_inset ERT
status open

\begin_layout Plain Layout

Andreas Bachmann
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
small{
\backslash
tt{bachman0@students.zhaw.ch}}
\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Andreas Butti 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
small{
\backslash
tt{buttiand@students.zhaw.ch}}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
publishers{
\end_layout

\begin_layout Plain Layout

	
\backslash
vspace{6cm}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{minipage}[t]{7cm}
\end_layout

\begin_layout Plain Layout

		{
\backslash
small Betreuer:}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
large Prof.
 Dr.
 Stephan Scheidegger
\backslash

\backslash
{
\backslash
normalsize School of Engineering
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		Technikumstrasse 9
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		8400 Winterthur 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		Telefon: 058 934 74 63
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

		{
\backslash
tt{stephan.scheidegger@zhaw.ch}}} 	
\end_layout

\begin_layout Plain Layout

	
\backslash
end{minipage}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{minipage}[t]{6cm}
\end_layout

\begin_layout Plain Layout

		{
\backslash
small Betreuer:}
\backslash

\backslash

\backslash
large Dr.
 Rudolf Marcel Füchslin
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		{
\backslash
normalsize School of Engineering
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		Technikumstrasse 9
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		8400 Winterthur 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		Telefon: 058 934 75 92
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		{
\backslash
tt{rudolf.fuechslin@zhaw.ch}}}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{minipage}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Abstract
\end_layout

\begin_layout Standard
Englische Version von “Zusammenfassung”
\end_layout

\begin_layout Section*
Zusammenfassung
\end_layout

\begin_layout Standard
Wird erst am Ende der Arbeit geschrieben
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Vorwort
\end_layout

\begin_layout Standard
In der Forschung aber auch zu Unterrichtszwecken werden viele Theorien vermittel
t und Simuliert.
 Solche Simulationen basieren meistens auf einem Strikt Mathematischen Hintergru
nd, meinst Integrale erster Ordnung.
 Forschende Personen im Bereich Physik / Biologie verwenden dabei bevorzugt
 eine Modellierungssoftware, da es nicht ihr Fachgebiet ist selbst zu programmie
ren.
 Andreas Butti hat sich bei der Verwendung von Simulationstools über deren
 Plattformabhängigkeit und Benutzerunfreundlichkeit gestört.
 Als Informatiker kommt man da schnell in Versuchung selbst etwas besserer
 zu schreiben.
 Nach einem Gespräch mit dem Physikdozenten, Herr Scheidegger, wurde daraus
 dann diese BA, die jedoch nicht nur ein Benutzerfreundliches Simulationswertzeu
g sein soll, sondern auch bisher nicht vorhandene Möglichkeiten für die
 Simulationen von Biologischen Abläufen, wie das innere einer Zelle, darstellen
 soll.
 TODO: Danksagung
\end_layout

\begin_layout Section
Einleitung
\end_layout

\begin_layout Standard
Es gibt bereits viele Simulationstools, wie z.B.
 Barekely Madonna um nur ein bekanntes Beispiel zu nennen.
 Diese Tools unterstützten die Modelierung von Differentialgleichungen als
 Modell, mit Containern und Flüssen.
 Diese modellart ist schon lange bekannt, und etabliert, daher übernehmen
 wir dieses Prinzip.
\end_layout

\begin_layout Subsection
Bereits existierende Tools
\end_layout

\begin_layout Subsection
Individualität unserer BA
\end_layout

\begin_layout Standard
Mit unserer Simulation ist es zusätzlich möglich in einem XY Modell mehrere
 Meso Kompartmente abzubilden, ein Meso Kompartment ist das vorhin genannte
 Flussmodel.
 Diese Meso Kompartmente können sich wären der Simulation im XY-Raum bewegen.
 Es können Dichten angegeben werden, die über den XY Raum verteilt sind,
 und die Meso Kompartmente können an Ihrer aktuellen Position von der dichte
 Konsumieren oder dichte Produzieren, somit kann die Umgebung beeinflusst
 werden.
 Mit diesen Fähigkeiten ist es möglich das innenleben einer Zelle oder andere
 Biologische Prozesse einfach, grafisch abzubilden.
 Die Idee und Vorgabe dieser Simulationsmethode stammt von Herr Scheidegger,
 und wurde zusammen mit Herr Füchslin und uns ausgearbeitet.
\end_layout

\begin_layout Subsection
Vorgabe
\end_layout

\begin_layout Standard
Bestehende graphische Modelleditoren erlauben eine effiziente Modellierung
 von kompartimentalen Systemen.
 Dabei unterstützt die graphische Oberfläche die Strukturierung des Modells
 bzw.
 des Systems.
 Dies kann gerade bei der Erfassung von komplexen Systemen den Zugang zu
 einer adäquaten Systembeschreibung erleichtern.
 Gerade aber Modelleditoren wie Berkeley- Madonna sind auf eine kompartimentale
 Struktur des Systems angewiesen.
 Räumlich strukturierte bzw.
 verteilte Systeme lassen sich nur schwer und in vereinfachter Form abbilden.
 Die Verwendung oder Kopplung verschiedener Simulationswerkzeuge kann für
 gewisse technische Systeme in Betracht gezogen werden (z.B.
 elektrische Schaltung mit Komponenten, bei denen die Wärmeabstrahlung und
 oder Wärmeleitung räumlich modelliert werden).
 Bei vielen Systemen lässt sich aber durch eine solche Kopplung das System
 nicht abbilden.
 Bei biologischen Systemen z.B.
 können sich Kompartimente bewegen (bei Zellen z.B.
 Chemo- und Haptotaxis).
 Zudem zeichnen sich biologische Systeme durch hierarchische Kompartimentstruktu
ren mit Unterkompartimenten aus.
 Ein weiterer Aspekt betrifft die Möglichkeit, dass Kompartimente in biologische
n Systemen fusionieren oder sich teilen können.
 Anforderungen Das zu entwickelnde Modellierungswerkzeug soll an die intuitive
 graphische Oberfläche bestehender Modellierungswerkzeuge für kompartimentale
 Simulationen anknüpfen.
 Folgene Aspekte sollen konzeptuell untersucht und wenn möglich implemetiert
 werden: - Hierarchische Kompartimente
\end_layout

\begin_layout Standard
Hierarchische Kompartimente - Räumliche Positionierung von Kompartimenten,
 welche die Wechselwirkung der Kompartimente auf gleicher Stufe beeinflussen
 kann und somit Einführung von Koordinaten (erster Schritt 2-Dim.) bzw.
 orthogonales Grid und beschreibung von Gradienten (z.B.
 für Änderung der räumlichen Position von Kompartimenten aufgrund von z.B.
 Gradienten) - Ausgabe eines Codes in einer Markup language (z.B.
 SBML), welcher von einem bestehenden Solver ausgeführt werden kann (z.B.
 Matlab)
\end_layout

\begin_layout Section
Übersicht
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/model-uebersicht.png
	width 12cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
bli
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Legende
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/model-uebersicht-legende.png
	width 8cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
bla
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es kann entweder ein Herkömmliches «Flow-Modell» erstellt werden, das bereits
 bekannt ist da es vom Konzept her identisch bereits von vielen Simulationstools
 angeboten wird.
 Oder es kann ein «XY-Modell» erstellt werden, das dann Meso Kopartments
 beinhaltet, diese befinden sich an einer Position (X / Y) und verweisen
 auf ein Modell («Flow-Model-X»).
 Im «XY-Modell» könne sich «Dichten» befinden, das sind Stoffe die eine
 gewisse Konzentration an einer gewissen Stelle aufweisen.
 Ein Meso Kompartment kann sich wären der Simulation im «XY-Modell» bewegen,
 es kann dichten Konsumieren oder Produzieren.
\end_layout

\begin_layout Section
Theoretische Grundlagen
\end_layout

\begin_layout Subsection
Gewöhnliche Differentialgleichungen
\end_layout

\begin_layout Standard
Eine Gewöhnliche Differentialgleichung (engl.
 Ordinary Differential Equation ODE) ist eine mathematische Gleichung, die
 Ableitungen, die Funktion selbst sowie die unabhängige Variable enthalten
 kann.
 Lösung einer Differentialgleichung ist eine Funktion, die mit ihren Ableitungen
 deckungsgleich mit der Differentialgleichung ist.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y^{\left(n\right)}=f\left(t,\; y\left(t\right),\; y^{\prime}\left(t\right),\;\ldots,\; y^{\left(n-1\right)}\left(t\right)\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Auf analytischem Weg kann eine Differentialgleichung durch Integration erfolgen.
 Die Fallbeschleinigung in Abbildung soll in Gleichung 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:fallbesch"

\end_inset

 als Beispiel gezeigt werden.
 Wir kennen die Beschleunigungs-Funktion, suchen die Weg-Funktion, finden
 durch Integration eine Lösung und kommen durch abermaliges Differenzieren
 wieder auf die Ursprüngliche Beschleunigungs-Funktion zurück.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
a\left(t\right) & = & \ddot{s}\left(t\right)=-g\label{eq:fallbesch}\\
v\left(t\right) & = & \int a\left(t\right)\cdot dt=\int-g\cdot dt=-gt+v\left(0\right)\nonumber \\
s\left(t\right) & = & \int v\left(t\right)\cdot dt=\int\left(-gt+v\left(0\right)\right)\cdot dt=-\frac{1}{2}gt^{2}+v\left(0\right)t+s\left(0\right)\nonumber 
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Für die computerunterstützte Berechnung von Simulationen dieser Art können
 verschiedene Techniken angewandt werden.
 Dabei gibt es Grundsätzlich zwei verschiedene Vorgehen: symbolische oder
 numerische.
 Unsere Simulation übernimmt das numerische Vorgehen, wie es auch Berkeley
 Madonna tut.
 Das Vorgehen beruht auf einer numerischen Approximation von Gewöhnlichen
 Differentialgleichungen.
 Diese Art kann nur Differentialgleichung 1.
 Ordnung berechnen.
 Eine Differentialgleichungen 2.
 Ordnung ist in Gleichung 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:odezweite"

\end_inset

 zu sehen.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\ddot{s}\left(t\right)=-g\label{eq:odezweite}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Eine Gewöhnliche Differentialgleichung 
\begin_inset Formula $n.$
\end_inset

 Ordnung kann aber in 
\begin_inset Formula $n$
\end_inset

 Differentialgleichungen 
\begin_inset Formula $1.$
\end_inset

 Ordnung umgeformt werden.
 In den Gleichungen 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:zweiodeerste"

\end_inset

 wird die Differentialgleichung 
\begin_inset Formula $2.$
\end_inset

 Ordnung in zwei Differentialgleichung
\begin_inset Formula $1.$
\end_inset

 Ordnung umgewandelt.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\dot{v}\left(t\right) & = & -g\label{eq:zweiodeerste}\\
\dot{s}\left(t\right) & = & v\left(t\right)\nonumber 
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
In unserer Simulation haben wir verschiedene numerische Verfahren implementiert,
 die wir nachfolgen kurz behandeln werden.
\end_layout

\begin_layout Subsubsection*
Euler
\end_layout

\begin_layout Standard
Das Euler-Verfahren, von Leonard Euler 1768 in seinem Buch 
\shape italic
Institutiones Calculi Integralis
\shape default
 präsentiert, ist ein einfaches numerisches Verfahren.
 Von einer Schrittweite 
\begin_inset Formula $h$
\end_inset

 multipliziert mit der Ableitung 
\begin_inset Formula $y'=f$
\end_inset

 zählt man den Anfangswert 
\begin_inset Formula $y_{0}$
\end_inset

 dazu und bekommt 
\begin_inset Formula $y_{1}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
y^{\prime} & = & f\left(t,\; y\left(t\right)\right)\\
y_{n+1} & = & y_{n}+h\cdot f\left(t_{n},\; y_{n}\right)\nonumber 
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
In unserem Beispiel mit der Fallbeschleunigung müssen wir das Verfahren
 zwei Mal anwenden pro Zeitschritt, da wir eine Differentialgleichung 2.
 Ordnung lösen möchten.
 Dabei müsen die Anfangswerte 
\begin_inset Formula $v_{0}$
\end_inset

 und 
\begin_inset Formula $s_{0}$
\end_inset

 sowie die Schrittweite 
\begin_inset Formula $h$
\end_inset

 bekannt sein.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
h & = & 0.1\\
v_{0} & = & 15\nonumber \\
s_{0} & = & 0\nonumber \\
v_{1} & = & 15+0.1\cdot\left(-9.81\right)=14.019\nonumber \\
s_{1} & = & 0+0.1\cdot\left[15+0.1\cdot\left(-9.81\right)\right]=1.4019\nonumber 
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Bei Differentialgleichungen 1.
 Ordnung und kleiner Schrittweite 
\begin_inset Formula $h$
\end_inset

 erhält man ausreichende Genauigkeit.
 Unser Beispiel mit 2.
 Ordnung büst bei jedem Schritt an Genauigkeit ein.
 Es gibt bessere Verfahrung, die auch Ordnungen höheren Grades mit weniger
 Genauigkeitsverlust zulassen.
\end_layout

\begin_layout Subsubsection*
Runge-Kutta
\end_layout

\begin_layout Standard
Um eine bessere Genauigkeit zu erhalten haben Carl Runge und Martin Wilhelm
 Kutta ein leistungsfähigeres Verfahren entwickelt.
 Um dieses Verfahren besser zu Verstehen, wird zuerst eine Tabelle eingeführt.
 Die Tabelle wurde in den 1960er Jahren von John Charles Butcher entwickelt
 und nennt sich Butcher tableau in Gleichung 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:butcher"

\end_inset

.
 Die Tabelle beinhaltet einen Vektor 
\begin_inset Formula $c_{i}$
\end_inset

, eine Matrix 
\begin_inset Formula $A=\left(a_{ij}\right)$
\end_inset

 und einen Vektor 
\begin_inset Formula $b_{j}$
\end_inset

 wobei 
\begin_inset Formula $i,\; j=1,...,s,\;=1,...,s$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{c|cccc}
c_{1} & a_{11} & a_{12} & \dots & a_{1s}\\
c_{2} & a_{21} & a_{22} & \dots & a_{2s}\\
\vdots & \vdots & \vdots & \ddots & \vdots\\
c_{s} & a_{s1} & a_{s2} & \dots & a_{ss}\\
\hline  & b_{1} & b_{2} & \dots & b_{s}
\end{array}\label{eq:butcher}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Wie beim Euler-Verfahren ergibt sich ein neuer Wert 
\begin_inset Formula $y_{n+1}$
\end_inset

 aus dem alten Wert 
\begin_inset Formula $y_{n}$
\end_inset

 addiert mit einer festen Schrittweite 
\begin_inset Formula $h$
\end_inset

 multiplitiert mit Ableitungen.
 Doch beim Runge-Kutta-Verfahren werden statt einer Ableitung verschieden
 gewichtete Ableitungen 
\begin_inset Formula $b_{i}k_{i}$
\end_inset

 aufsummiert, wobei das Gewicht 
\begin_inset Formula $b_{i}$
\end_inset

 und die Ableitung 
\begin_inset Formula $k_{i}$
\end_inset

 ist.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{n+1}=y_{n}+h\sum_{i=1}^{s}b_{i}k_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Eine Ableitung, auch Zwischenschritt genannt, ist in Gleichung 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:intermstep"

\end_inset

 erläutert.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
k_{i}=f\left(t_{n}+hc_{i},\; y_{n}+h\sum_{j=1}^{s}a_{ij}k_{i}\right),\; i=1,...,s\label{eq:intermstep}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Für den ersten Parameter der Funktion 
\begin_inset Formula $f\left(t\; y\left(t\right)\right)$
\end_inset

 benötigen wir einen Koeffizienten 
\begin_inset Formula $c_{i}$
\end_inset

.
 Jedes 
\begin_inset Formula $c_{i},\; i=1,...,s$
\end_inset

 bildet eine Summe aller Elemente eine Zeile der Matrix 
\begin_inset Formula $A=\left(a_{ij}\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\sum_{j=1}^{s}a_{ij}=c_{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Dormand-Prince
\end_layout

\begin_layout Standard
f
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Gradienten-Verfahren
\end_layout

\begin_layout Section
Werkzeuge und Hilfsmittel
\end_layout

\begin_layout Subsection
Programmiersprachen
\end_layout

\begin_layout Standard
Als Programmiersprache kam Java zum Einsatz.
 Java ist Plattform unabhängig und sehr angenehm zum Programmieren.
 Es existieren gute Bibliotheken für grafische Darstellungen, und Java war
 bereits beiden Studierenden bekannt.
\end_layout

\begin_layout Subsection
Markup Language
\end_layout

\begin_layout Standard
Als Markup Language für die Simulation kam der Matlab Syntax zum Einsatz,
 der ebenfalls vom Open Source Tool «octave» verarbeitet werden kann.
\end_layout

\begin_layout Subsection
Entwicklungsumgebung
\end_layout

\begin_layout Standard
Bei Java ist man nicht fest an eine Entwicklungsumgebung gebunden.
 Das Projekt kann mit Hilfe der Ant-Buildfiles automatisch kompiliert werden,
 somit war es kein Problem das Andreas Bachmann IntelliJ und Andreas Butti
 Eclipse als Entwicklungsumgebung verwendet hat.
\end_layout

\begin_layout Subsection
Testing
\end_layout

\begin_layout Standard
Die Zeit hat leider nicht gereicht eine komplette Testumgebung einzurichten.
 Das Automatische Testen einer GUI-Applikation ist auch nicht ganz trivial.
 Trotzdem wurden einzelne TestCases für JUnit geschrieben, jedoch nicht
 für die GUI.
 Auf nachfrage war auch den Unterrichtenden Java Dozenten an der ZHAW keine
 Lösung bekannt die für GUI Applikationen allgemein funktionieren würde.
 Da sowieso zuwenig Zeit vorhanden war wurde das automatische Testing der
 GUI dann Ersatzlos gestrichen.
\end_layout

\begin_layout Section
Vorgehen
\end_layout

\begin_layout Subsection
MVC
\end_layout

\begin_layout Subsection
Tests und Validierung
\end_layout

\begin_layout Standard
Test der Matheengine, Vergleich mit Berkeley-Madonna
\end_layout

\begin_layout Section
Resultate
\end_layout

\begin_layout Standard
Beschreibung, Screenshots, Beispielsimulationen mit Ergebniss-Diagramm
\end_layout

\begin_layout Section
Diskussion und Ausblick
\end_layout

\begin_layout Standard
Was Fehlt noch, was muss noch gemacht werden? Interpretation und Validierung
 der Resultate Rückblick auf Aufgabenstellung, erreicht bzw.
 nicht erreicht Legt dar, wie an die Resultate (konkret vom Industriepartner
 oder weiteren Forschungsarbeiten; allgemein) angeschlossen werden kann;
 legt dar, welche Chancen die Resultate bieten 18
\end_layout

\begin_layout Section
Verzeichnisse
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
refname{
\backslash
subsection{Literaturverzeichnis}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "din1505/alphadin"

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Glossar
\end_layout

\begin_layout Standard
Meso-Kompartment: Ein Teil des XY-Simulationsmodells
\end_layout

\end_body
\end_document
